---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Meevere.
--- DateTime: 22.11.2022 23:44
---

-- Stack Table
-- Uses a table as stack, use <table>:push(value) and <table>:pop()
-- Lua 5.1 compatible


local class = require("libs/30log")

--- It would be better to make it @generic, but atm it's WIP and doesn't work
--- @class Stack
local Stack = class("Stack", {})

-- Create a Table with stack functions
function Stack:init()
    self._et = {}
end

-- push a value on to the stack
function Stack:push(...)
    if ... then
        local targs = {...}
        -- add values
        for _,v in ipairs(targs) do
            table.insert(self._et, v)
        end
    end
end

-- allows to look at last without popping
function Stack:lookup()
    return self._et[#self._et]
end

-- pop a value from the stack
function Stack:pop(num)
    -- get num values from stack
    num = num or 1

    -- return table
    local entries = {}

    -- get values into entries
    for i = 1, num do
        -- get last entry
        if #self._et ~= 0 then
            table.insert(entries, self._et[#self._et])
            -- remove last value
            table.remove(self._et)
        else
            break
        end
    end
    -- return unpacked entries
    return unpack(entries)
end

-- get entries
function Stack:size()
    return #self._et
end

-- list values
function Stack:list()
    for i,v in pairs(self._et) do
        print(i, v)
    end
end

return Stack