---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Meevere.
--- DateTime: 27.11.2022 0:20
---

--- Example of tank component
--- tank = {
---     aim = Vector2() | nil - at what coordinate it aims
--- }

local Vector2 = require("utility/vector")[1]
local Stack = require("utility/stack")
local dump = require("utility/dump")

local Sprite = require("src/graphics/Sprite")[1]
local CategoryManager = require("src/CategoryManager")

local tiny = require("libs/tiny")


local TankBehavior = tiny.processingSystem()
TankBehavior.filter = tiny.requireAll("tank", "body", "msprite")

function TankBehavior:onAdd(entity)
    if entity.tank.messages then
        return
    end
    entity.tank.messages = Stack()

    entity.tank.reload = 0
end

function TankBehavior:process(entity, dt)
    -- Command logic
    while entity.tank.messages:size() ~= 0 do
        --print("Command: \n", dump(entity.tank.messages:lookup(), 2, 2))
        local message = entity.tank.messages:pop()
        local command = message[1]

        if self[command] then
            self[command](self, entity, dt, message[2])
        end
    end
end


--- Possible actions
---
--- shoot
--- -> args = none
---
--- aim
--- -> args =
---     Vector2 --- to where
---
--- move
--- -> args =
---     Vector2 --- direction
--- stop
--- -> args = none
---
---


--- Move block

---@param vel - Vector2
function TankBehavior:move(entity, dt, vel)
    local velocity = vel * 100

    --entity.tank.is_moving = true
    entity.msprite.sprites.body.sprite:set("move")
    entity.body:setLinearVelocity(velocity:x(), velocity:y())
end

function TankBehavior:stop(entity, dt)
    --entity.tank.is_moving = false
    entity.msprite.sprites.body.sprite:set("idle")
    entity.body:setLinearVelocity(0, 0)
end


--- Aim block

local function tower_state(phi)
    if( phi > 7/8 ) then
        return "left"
    end
    if( phi > 5/8) then
        return "left_down"
    end
    if( phi > 3/8) then
        return "down"
    end
    if( phi > 1/8) then
        return "right_down"
    end
    if( phi > -1/8) then
        return "right"
    end
    if( phi > -3/8) then
        return "right_up"
    end
    if( phi > -5/8) then
        return "up"
    end
    if( phi > -7/8) then
        return "left_up"
    end
    return "left"
end

---@param vel - Vector2
function TankBehavior:aim(entity, dt, aim)
    local position = Vector2(entity.body:getPosition())
    entity.tank.aim = aim;

    local angle = (aim - position):angle()/math.pi
    entity.msprite.sprites.tower.sprite:set(tower_state(angle))
end


--- Shoot block

function TankBehavior:_bullet(entity)
    local p_world = entity.body:getWorld()
    local world = self.world
    local x, y = entity.body:getPosition()

    local bullet = {
        sprite = Sprite(love.graphics.newImage("assets/player/Bullet1.png")),
        shape = love.physics.newRectangleShape(10, 10),
        bullet = {},
        behavior = "bullet"
    }
    bullet.body = love.physics.newBody(p_world, x+15, y, "kinematic")
    bullet.body:setFixedRotation(true)
    bullet.fixture = love.physics.newFixture(bullet.body, bullet.shape)
    bullet.fixture:setSensor(true)
    bullet.fixture:setUserData({
        entity = bullet
    })

    CategoryManager.setBullet(bullet.fixture, CategoryManager.categories.player_bullets)

    --print(dump(bullet, 2, 2))
    world:addEntity(bullet)
    return bullet
end

function TankBehavior:shoot(entity, dt)

    if entity.tank.reload > 0 then
        entity.tank.reload = entity.tank.reload - dt
        return
    end
    entity.tank.reload = 0.1

    if entity.tank.aim == nil then
        return
    end -- If we aim at nothing there is nothing to shoot
    local position = Vector2(entity.body:getPosition())

    local dx = entity.tank.aim - position
    if dx:mag() == 0 then
        return
    end
    local vel = 500 * dx / dx:mag()

    --print(dump(vel, 2, 2))

    local bullet = self:_bullet(entity)
    bullet.body:setLinearVelocity(vel[1], vel[2])
    bullet.body:setAngle(dx:angle())
end

function TankBehavior:hurt(entity, dt)
    entity.msprite.sprites.body.sprite.hurt_effect = true
    entity.msprite.sprites.tower.sprite.hurt_effect = true
end

function TankBehavior:die(entity, dt)
    local world = self.world
    tiny.removeEntity(world, entity)
    entity.body:destroy()
end

return TankBehavior