---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Meevere.
--- DateTime: 08.03.2023 12:12
---

local class = require("libs/30log")

local AITank = tiny.processingSystem(class("AITank"))
AITank.filter = tiny.requireAll("tank", "ai")

function AITank:init()
    self.target = nil
end

function AITank:onAdd(entity)
    fill_table(entity.ai, {
        messages = Stack(),
        stack = Stack(),

        target = self.target,
        target_pos = nil,
        in_shoot_range = false,

        stare_timer_max = 1,
        stare_timer = 0,

        --ram_timer = 0,
        --ram_timer_max = 20,
        --ram_reloaded = true,
        --in_ram_range = false,
        --
        --ram_anticipation_timer = 0,
        --ram_anticipation_max = 5
    })
end

function AITank:process(entity, dt)
    local ai = entity.ai

    --if ai.ram_reloaded then
    --    ai.ram_timer = ai.ram_timer + dt
    --end
    --if ai.ram_timer > ai.ram_timer_max then
    --    ai.ram_reloaded = true
    --end

    --- Messages
    while ai.messages:size() ~= 0 do
        local message = entity.ai.messages:pop()
        local command = message[1]

        if self[command] then
            self[command](self, entity, dt, message[2])
        end
    end

    --- Stack-machine stuff
    if ai.stack:size() == 0 then
        ai.stack:push("idle")
    end

    local state = ai.stack:pop()
    self[state](self, entity, dt)
end

function AITank:contact(entity, dt, data)
    local other = data[2]
    local this = data[1]

    if this.name ~= "shoot_box" then
        return
    end

    if other.entity == entity.ai.target then
        entity.ai.in_shoot_range = true
        entity.ai.target_pos = Vector2(entity.ai.target.body:getPosition())
    end
end

function AITank:endContact(entity, dt, data)
    local other = data[2]
    local this = data[1]

    if this.name ~= "shoot_box" then
        return
    end
    if other.entity == entity.ai.target then
        entity.ai.in_shoot_range = false
    end
end

function AITank:idle(entity, dt)
    local ai = entity.ai

    --if ai.in_ram_range then
    --    ai.stack:push("ramAwait")
    --    return
    --end

    if ai.in_shoot_range then
        ai.stack:push("aiming")
        return
    end
end

--function AITank:ramAwait(entity, dt)
--    local ai = entity.ai
--    entity.tank.messages:push("stop")
--
--end
--
--function AITank:ram(entity, dt)
--
--end

function AITank:aiming(entity, dt)
    local ai = entity.ai
    entity.tank.messages:push({"stop"})
    entity.tank.messages:push({"aim", entity.ai.target_pos})

    if ai.stare_timer < ai.stare_timer_max then
        ai.stare_timer = ai.stare_timer + dt
        ai.stack:push("aiming")
        return
    end

    if entity.tank.reloaded then
        ai.stare_timer = 0
        entity.tank.messages:push({"shoot"})
    end
end

return AITank

