---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Meevere.
--- DateTime: 20.11.2022 0:49
---

local json = require("libs/json/json")

require("libs/strong")
require("utility/rcall")
local anim8 = require("libs/anim8")
local Sprite, MSprite, Depth, Placement = unpack(require('src/graphics/Sprite'))

--- @class GraphicsLoader
--- @field sprites table<string,Sprite>
--- @field animations table<string,Sprite> -- sprites that are animations...
--- @field msprites table<string,MSprite>
---
--- @field loadAnimations fun(self:GraphicsLoader, path:string, destination:string?): table<string,Sprite> 
--- @field loadSprites fun(self:GraphicsLoader, path:string, destination:string?): table<string,Sprite>
--- @field loadMSprites fun(self:GraphicsLoader, path:string, destination:string?): table<string,MSprite>

local GraphicsLoader = {
    animations = {},
    sprites = {},
    msprites = {}
}

local PATH_DELIMITER = "/"

--- Function for loading files, either .json or .lua that 
--- contain data and returns it.
--- @param path string --
--- The format is folowing, it must be 
--- "path/to/dir/`name`" or "path/to/dir/`name`.lua" or .json if
--- you want to specify which one. 
--- Will return nothing in case if both are present and extension is not specified
--- @return table|nil
function GraphicsLoader:_loadFile(path)
    local split = path / PATH_DELIMITER
    local last = split[#split]
    if last == "" then
        return nil -- It means we got string like "blabla/blabla/" <- ends with delimiter
    end
    local extension = ""
    do
        local t = last / "."
        if #t > 1 then
            extension = t[#t]
        end
    end

    if extension == "" then
        local info_lua = love.filesystem.getInfo(path..".lua")
        local info_json = love.filesystem.getInfo(path..".json")
        if info_lua ~= nil and info_lua.type == "file" then
            extension = "lua"
        elseif info_json ~= nil and info_json.type == "file" then
            extension = "json"
        end
    end

    if extension == "lua" then
        return dofile(path..".lua")
    end
    if extension == "json" then
        local f = assert(io.open(path..".json", "rb"))
        local content = f:read("*all")
        f:close()
        return json.decode(content)
    end
    return nil
end

--- Function for loading animations from directory
---
--- @param path string
--- contains the path to assets directory. This directory must contain da.json file
--- Example of path - "assets/effects/"
---
--- @param name string?
--- if nil, then animations are saved in 'animations' property,
--- if string - they are saved under 'self.animations[name]'
---
--- @return table
--- always returns a table containing loaded animations
function GraphicsLoader:loadAnimations(path, name)

    local raw = self:_loadFile(path.."da")
    if raw == nil then
        error("No content at provided path", 2)
    end

    local destination = {}
    if type(name) == "string" then
        self.animations.name = {}
        destination = self.animations.name
    else
        destination = self.animations
    end

    for k, v in pairs(raw) do
        local image = love.graphics.newImage(path..v.filename)

        local camera_affected, offset, origin, scale
        if v.camera_affected ~= nil then camera_affected = v.camera_affected end
        if v.offset ~= nil then offset = v.offset end
        if v.origin ~= nil then origin = v.origin end
        if v.scale ~= nil then scale = v.scale end

        local grid = nil
        local animations = nil
        if v.grid then
            local offset_x, offset_y
            if v.grid.offset ~= nil then
                offset_x = v.grid.offset[1]
                offset_y = v.grid.offset[2]
            end

            grid = anim8.newGrid(
                    v.grid.size[1], v.grid.size[2],
                    image:getWidth(), image:getHeight(),
                    offset_x, offset_y,
                    v.grid.border
            )
        
            if v.animations then
                animations = {}
                for k1, anim in pairs(v.animations) do
                    animations[k1] = {
                        animation = anim8.newAnimation(grid(unpack(anim.frames)), anim.durations or 1),
                        image = image
                    }
                end
            end
        end

        destination[v.name] = Sprite({
            animations = animations,
            current_animation = v.current_animation
        }, camera_affected, offset, origin, scale)
    end
    return destination
end


--- Function for loading sprites from directory
---
--- @param path string
--- contains the path to assets directory. This directory must contain ds.json file
--- Example of path - "assets/effects/"
---
--- @param name string?
--- if true, then sprites are saved in 'sprites' property,
--- if string - they are saved under 'self.sprites[name]'
---
--- @return table
--- always returns a table containing loaded sprites
function GraphicsLoader:loadSprites(path, name)

    local raw = self:_loadFile(path.."ds")
    if raw == nil then
        error("No content at provided path", 2)
    end

    local destination = {}
    if type(name) == "string" then
        self.sprites.name = {}
        destination = self.sprites.name
    else
        destination = self.sprites
    end

    for k, v in pairs(raw) do
        local image = love.graphics.newImage(path..v.filename)

        local camera_affected, offset, origin, scale
        if v.camera_affected ~= nil then camera_affected = v.camera_affected end
        if v.offset ~= nil then offset = v.offset end
        if v.origin ~= nil then origin = v.origin end
        if v.scale ~= nil then scale = v.scale end

        destination[v.name] = Sprite(
            image, camera_affected, offset, origin, scale
        )
    end
    return destination
end


function GraphicsLoader:loadMSprites(path, name)

    local raw = self:_loadFile(path.."dms")
    if raw == nil then
        error("No content at provided path", 2)
    end

    local destination = {}
    if type(name) == "string" then
        self.msprites.name = {}
        destination = self.msprites.name
    else
        destination = self.msprites
    end

    for k, v in pairs(raw) do
        destination[k] = {}
        local temp = {}
        for key, data in pairs(v) do
            local sprite = rcall(self, data.sprite)
            if sprite == nil then
                error("No sprite present at ", data.sprite)
            end
            local placement = Placement({data.placement[1], data.placement[2]}, data.placement[3])

            temp[key] = {
                sprite = sprite,
                placement = placement
            }
        end
        destination[k] = MSprite(temp)
    end
    return destination
end

return GraphicsLoader