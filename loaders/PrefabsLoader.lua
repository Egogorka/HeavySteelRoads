---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Meevere.
--- DateTime: 29.03.2023 13:29
---

local class = require("libs/30log")
local json = require("libs/json/json")

require("utility/rcall")

local Sprite, MSprite, Depth, Placement = unpack(require('src/graphics/Sprite'))

local PrefabsLoader = class("GraphicsLoader")

function PrefabsLoader:init(graphics_loader, physics_world)
    self.physics_world = physics_world
    self.graphics_loader = graphics_loader
    --- Contains raw prefabs, should not be accessed directly!
    self.prefabs = {}
end

function PrefabsLoader:setPhysicsWorld(physics_world)
    self.physics_world = physics_world
end

--- @param path string - path to the json that holds the prefabs
--- @param name string - contains the parent name of the prefabs under which they could be accessed
--- so the end result would be `"name" + "key"` from json
function PrefabsLoader:loadPrefabs(path, name)
    local f = assert(io.open(path, "rb"))
    local content = f:read("*all")
    f:close()

    local raw = json.decode(content)

    local holder = rcreate(self.prefabs, name)
    for key, prefab in pairs(raw) do
        holder[key] = prefab
    end
end

function PrefabsLoader:fabricate(name)
    if not self.physics_world then
        print("Error: Fabricating "..name.." without physics_world property set")
    end

    local p = rcopy(rcall(self.prefabs, name))
    if p.sprite then
        p.sprite = self.graphics_loader.sprites[p.sprite]:clone()
    end
    if p.msprite then
        p.msprite = self.graphics_loader.msprites[p.msprite]:clone()
    end
    if p.depth then
        if type(p.depth) == "number" then
            p.depth = Depth(p.depth)
        else
            p.depth = Depth(p.depth.z, p.depth.scalable)
        end
    end
    if p.body then
        p.body = love.physics.newBody(self.physics_world, 0, 0, p.body)
        p.body:setFixedRotation(true)
        if p.shape then
            p.shape = love.physics.newRectangleShape(unpack(p.shape))
        end
        if p.fixture then
            p.fixture = love.physics.newFixture(p.body, p.shape)
            p.fixture:setUserData({
                entity = p
            })
        end
    end
    return p
end

return PrefabsLoader